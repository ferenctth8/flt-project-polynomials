//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 26 13:45:57 EEST 2012
//----------------------------------------------------

package flt.polynomialInterpreter.parser;

import flt.polynomial.Monomial;
import flt.polynomial.Polynomial;
import flt.polynomialOperations.ArithmethicExpression;
import flt.polynomialOperations.DifferentialExpression;
import flt.polynomialOperations.Expression;
import flt.polynomialOperations.IntegralExpression;
import flt.polynomialOperations.PolynomialOperations;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 26 13:45:57 EEST 2012
  */
public class PolynomialParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PolynomialParser() {super();}

  /** Constructor which sets the default scanner. */
  public PolynomialParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PolynomialParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\007\000\002\002\004\000\002\002" +
    "\005\000\002\002\003\000\002\002\005\000\002\002\003" +
    "\000\002\003\005\000\002\003\005\000\002\003\003\000" +
    "\002\003\011\000\002\004\007\000\002\005\012\000\002" +
    "\010\012\000\002\006\012\000\002\011\007\000\002\012" +
    "\007\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\006\000\002\014\006\000\002\014\006\000" +
    "\002\014\006\000\002\014\006\000\002\015\007\000\002" +
    "\016\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\013\000\006\020\006\023\005\001\002\000\004\002" +
    "\015\001\002\000\006\002\ufffe\013\013\001\002\000\006" +
    "\002\ufffc\007\007\001\002\000\004\023\010\001\002\000" +
    "\006\002\ufffd\013\011\001\002\000\004\020\012\001\002" +
    "\000\004\002\001\001\002\000\004\020\014\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\013\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PolynomialParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PolynomialParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PolynomialParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* custom data */
 private String customData;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PolynomialParser$actions {
  private final PolynomialParser parser;

  /** Constructor */
  CUP$PolynomialParser$actions(PolynomialParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PolynomialParser$do_action(
    int                        CUP$PolynomialParser$act_num,
    java_cup.runtime.lr_parser CUP$PolynomialParser$parser,
    java.util.Stack            CUP$PolynomialParser$stack,
    int                        CUP$PolynomialParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PolynomialParser$result;

      /* select the action based on the action number */
      switch (CUP$PolynomialParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // iexpr ::= INTEGRAL LBRACKET polynomial RBRACKET SEMI 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).right;
		Polynomial p = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).value;
		 RESULT = new IntegralExpression(p); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("iexpr",12, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-4)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dexpr ::= DIFFERENTIAL LBRACKET polynomial RBRACKET SEMI 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).right;
		Polynomial p = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).value;
		 RESULT = new DifferentialExpression(p); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("dexpr",11, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-4)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aexpr ::= polynomial MODE polynomial SEMI 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).right;
		Polynomial e1 = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).right;
		Polynomial e2 = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).value;
		 RESULT = new ArithmethicExpression(e1, e2, ArithmethicExpression.REMAINDER); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("aexpr",10, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aexpr ::= polynomial DIVIDE polynomial SEMI 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).right;
		Polynomial e1 = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).right;
		Polynomial e2 = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).value;
		 RESULT = new ArithmethicExpression(e1, e2, ArithmethicExpression.DIVISION); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("aexpr",10, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aexpr ::= polynomial TIMES polynomial SEMI 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).right;
		Polynomial e1 = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).right;
		Polynomial e2 = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).value;
		 RESULT = new ArithmethicExpression(e1, e2, ArithmethicExpression.MULTIPLICATION); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("aexpr",10, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aexpr ::= polynomial MINUS polynomial SEMI 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).right;
		Polynomial e1 = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).right;
		Polynomial e2 = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).value;
		 RESULT = new ArithmethicExpression(e1, e2, ArithmethicExpression.SUBTRACTION); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("aexpr",10, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aexpr ::= polynomial PLUS polynomial SEMI 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).right;
		Polynomial e1 = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).right;
		Polynomial e2 = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).value;
		 RESULT = new ArithmethicExpression(e1, e2, ArithmethicExpression.ADDITION); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("aexpr",10, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-3)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // gexpr ::= iexpr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("gexpr",9, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // gexpr ::= dexpr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("gexpr",9, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // gexpr ::= aexpr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("gexpr",9, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // firstFormalIntegral ::= INTEGRAL LBRACKET polynomial RBRACKET SEMI 
            {
              Polynomial RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).right;
		Polynomial p = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).value;
		 RESULT = PolynomialOperations.integrate(p); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("firstFormalIntegral",8, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-4)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // firstFormalDerivative ::= DIFFERENTIAL LBRACKET polynomial RBRACKET SEMI 
            {
              Polynomial RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).right;
		Polynomial p = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).value;
		 RESULT = PolynomialOperations.differentiate(p); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("firstFormalDerivative",7, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-4)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // product ::= LBRACKET polynomial RBRACKET MINUS LBRACKET polynomial RBRACKET SEMI 
            {
              Polynomial RESULT =null;
		int multiplicandleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-6)).left;
		int multiplicandright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-6)).right;
		Polynomial multiplicand = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-6)).value;
		int multiplierleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).left;
		int multiplierright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).right;
		Polynomial multiplier = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).value;
		 RESULT = PolynomialOperations.multiply(multiplicand, multiplier); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("product",4, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-7)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // difference ::= LBRACKET polynomial RBRACKET MINUS LBRACKET polynomial RBRACKET SEMI 
            {
              Polynomial RESULT =null;
		int minuendleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-6)).left;
		int minuendright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-6)).right;
		Polynomial minuend = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-6)).value;
		int subtrahendleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).left;
		int subtrahendright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).right;
		Polynomial subtrahend = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).value;
		 RESULT = PolynomialOperations.subtract(minuend, subtrahend); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("difference",6, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-7)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sum ::= LBRACKET polynomial RBRACKET PLUS LBRACKET polynomial RBRACKET SEMI 
            {
              Polynomial RESULT =null;
		int termAleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-6)).left;
		int termAright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-6)).right;
		Polynomial termA = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-6)).value;
		int termBleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).left;
		int termBright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).right;
		Polynomial termB = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).value;
		 RESULT = PolynomialOperations.add(termA, termB); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("sum",3, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-7)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // polynomial_op ::= NUMBER TIMES LBRACKET polynomial RBRACKET 
            {
              Polynomial RESULT =null;
		int nrleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-4)).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-4)).right;
		Integer nr = (Integer)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).right;
		Polynomial p = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).value;
		 RESULT = new Polynomial(nr, p); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("polynomial_op",2, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-4)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // polynomial ::= POL_VAR LBRACKET TERMX RBRACKET EQUAL monome SEMI 
            {
              Polynomial RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).right;
		Monomial m = (Monomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).value;
		 RESULT = new Polynomial(m.getDegree(), m); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("polynomial",1, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-6)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // polynomial ::= monome 
            {
              Monomial RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).right;
		Monomial m = (Monomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.peek()).value;
		 RESULT = new Monomial(m.getDegree(), m.getCoefficient()); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("polynomial",1, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // polynomial ::= polynomial MINUS monome 
            {
              Polynomial RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).right;
		Polynomial p = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).right;
		Monomial m = (Monomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.peek()).value;
		 RESULT = new Polynomial(p, m); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("polynomial",1, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // polynomial ::= polynomial PLUS monome 
            {
              Polynomial RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).right;
		Polynomial p = (Polynomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).right;
		Monomial m = (Monomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.peek()).value;
		 RESULT = new Polynomial(p, m); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("polynomial",1, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // monome ::= NUMBER 
            {
              Monomial RESULT =null;
		int nrleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).right;
		Integer nr = (Integer)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.peek()).value;
		 RESULT = new Monomial(0, new Double(nr.doubleValue())); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("monome",0, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // monome ::= NUMBER TIMES TERMX 
            {
              Monomial RESULT =null;
		int nrleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).right;
		Integer nr = (Integer)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)).value;
		 RESULT = new Monomial(new Integer(nr.intValue()), 1.0); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("monome",0, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // monome ::= TERMX 
            {
              Monomial RESULT =null;
		 RESULT = new Monomial(1, 1.0); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("monome",0, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // monome ::= TERMX POWER_OP NUMBER 
            {
              Monomial RESULT =null;
		int nrleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).right;
		Integer nr = (Integer)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.peek()).value;
		 RESULT = new Monomial(1, new Double(nr.doubleValue())); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("monome",0, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-2)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= monome EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).right;
		Monomial start_val = (Monomial)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)).value;
		RESULT = start_val;
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-1)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PolynomialParser$parser.done_parsing();
          return CUP$PolynomialParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // monome ::= NUMBER TIMES TERMX POWER_OP NUMBER 
            {
              Monomial RESULT =null;
		int nr1left = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-4)).left;
		int nr1right = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-4)).right;
		Integer nr1 = (Integer)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-4)).value;
		int nr2left = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).left;
		int nr2right = ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()).right;
		Integer nr2 = (Integer)((java_cup.runtime.Symbol) CUP$PolynomialParser$stack.peek()).value;
		 RESULT = new Monomial(new Integer(nr2.intValue()), new Double(nr1.doubleValue())); 
              CUP$PolynomialParser$result = parser.getSymbolFactory().newSymbol("monome",0, ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.elementAt(CUP$PolynomialParser$top-4)), ((java_cup.runtime.Symbol)CUP$PolynomialParser$stack.peek()), RESULT);
            }
          return CUP$PolynomialParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

